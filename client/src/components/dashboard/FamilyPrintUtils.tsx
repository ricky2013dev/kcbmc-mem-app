import { FamilyWithMembers } from '@server/schema';
import { SearchFilters } from '@/types/family';

interface PrintUtilsProps {
  families: FamilyWithMembers[];
  filters: SearchFilters;
}

export class FamilyPrintUtils {
  /**
   * Print search results in a formatted table
   */
  static printSearchResults(families: FamilyWithMembers[], filters: SearchFilters) {
    const printContent = `
      <html>
        <head>
          <title>Family Search Results</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              margin: 20px;
              font-size: 12px;
              line-height: 1.4;
            }
            .header {
              border-bottom: 2px solid #333;
              padding-bottom: 15px;
              margin-bottom: 25px;
            }
            .title {
              font-size: 22px;
              font-weight: bold;
              margin-bottom: 10px;
              color: #2c3e50;
            }
            .search-info {
              color: #666;
              margin-bottom: 5px;
              font-size: 11px;
            }
            .results-table {
              width: 100%;
              border-collapse: collapse;
              margin-top: 15px;
              font-size: 10px;
            }
            .results-table th {
              background: #f8f9fa;
              padding: 10px 8px;
              border: 1px solid #dee2e6;
              font-weight: bold;
              text-align: left;
              color: #495057;
            }
            .results-table td {
              padding: 8px;
              border: 1px solid #dee2e6;
              vertical-align: top;
            }
            .results-table tr:nth-child(even) {
              background: #f8f9fa;
            }
            .family-name {
              font-weight: bold;
              color: #2c3e50;
            }
            .children-list {
              font-size: 9px;
              color: #495057;
            }
            .phone-info {
              font-size: 9px;
            }
            .footer {
              margin-top: 30px;
              padding-top: 15px;
              border-top: 1px solid #dee2e6;
              font-size: 10px;
              color: #6c757d;
              text-align: center;
            }
            @media print {
              body { margin: 0; }
              .results-table { font-size: 9px; }
              .header { page-break-after: avoid; }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <div class="title">Family Search Results</div>
            <div class="search-info">Applied Filters: ${this.getFilterDescription(filters)}</div>
            <div class="search-info">Total Results: ${families.length} families</div>
            <div class="search-info">Generated: ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</div>
          </div>

          <table class="results-table">
            <thead>
              <tr>
                <th style="width: 18%;">Family Name</th>
                <th style="width: 12%;">Visited Date</th>
                <th style="width: 25%;">Children</th>
                <th style="width: 20%;">Address</th>
                <th style="width: 15%;">Phone</th>
                <th style="width: 10%;">Supporter</th>
              </tr>
            </thead>
            <tbody>
              ${this.generateFamilyTableRows(families)}
            </tbody>
          </table>

          <div class="footer">
            Generated by Family Management System ‚Ä¢ ${families.length} families listed
          </div>
        </body>
      </html>
    `;

    this.openPrintWindow(printContent);
  }

  /**
   * Print individual family information in detail
   */
  static printFamilyInfo(family: FamilyWithMembers) {
    const children = family.members.filter(m => m.relationship === 'child');
    const childrenInfo = children.map(child => {
      const name = child.koreanName && child.englishName
        ? `${child.koreanName} (${child.englishName})`
        : child.koreanName || child.englishName || '';
      const grade = child.gradeLevel || '';
      const gradeGroup = child.gradeGroup || '';
      return { name, grade, gradeGroup };
    });

    const fullAddress = [
      family.address,
      family.city,
      family.state,
      family.zipCode
    ].filter(Boolean).join(', ');

    const husband = family.members.find(m => m.relationship === 'husband');
    const wife = family.members.find(m => m.relationship === 'wife');

    const printContent = `
      <html>
        <head>
          <title>Family Information - ${family.familyName}</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              margin: 20px;
              line-height: 1.6;
            }
            .header {
              border-bottom: 2px solid #333;
              padding-bottom: 15px;
              margin-bottom: 25px;
              display: flex;
              align-items: flex-start;
              gap: 25px;
            }
            .header-content {
              flex: 1;
            }
            .family-picture {
              width: 140px;
              height: 140px;
              border: 3px solid #dee2e6;
              border-radius: 12px;
              object-fit: cover;
              box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            }
            .dummy-picture {
              width: 140px;
              height: 140px;
              border: 3px solid #dee2e6;
              border-radius: 12px;
              background: #f8f9fa;
              display: flex;
              align-items: center;
              justify-content: center;
              color: #adb5bd;
              font-size: 48px;
            }
            .family-name {
              font-size: 28px;
              font-weight: bold;
              margin-bottom: 10px;
              color: #2c3e50;
            }
            .family-id {
              font-size: 12px;
              color: #6c757d;
              margin-bottom: 8px;
            }
            .visited-date {
              font-size: 14px;
              color: #495057;
              margin-bottom: 5px;
            }
            .section {
              margin-bottom: 25px;
              page-break-inside: avoid;
            }
            .section-title {
              font-size: 18px;
              font-weight: bold;
              margin-bottom: 12px;
              color: #2c3e50;
              border-bottom: 1px solid #dee2e6;
              padding-bottom: 5px;
            }
            .child-item {
              margin: 8px 0;
              padding: 12px;
              border-left: 4px solid #28a745;
              background: #f8fff8;
              border-radius: 4px;
            }
            .child-name {
              font-weight: bold;
              font-size: 14px;
              color: #2c3e50;
            }
            .child-details {
              font-size: 12px;
              color: #6c757d;
              margin-top: 4px;
            }
            .contact-item {
              margin: 8px 0;
              padding: 12px;
              background: #f8f9fa;
              border-radius: 6px;
              border-left: 4px solid #007bff;
            }
            .contact-label {
              font-weight: bold;
              color: #495057;
            }
            .contact-value {
              color: #2c3e50;
            }
            .notes {
              background: #f0f8ff;
              padding: 20px;
              border-radius: 8px;
              white-space: pre-wrap;
              border: 1px solid #cce7ff;
              font-size: 13px;
              line-height: 1.6;
            }
            .supporter {
              background: #fff3cd;
              padding: 12px;
              border-radius: 6px;
              font-weight: bold;
              color: #856404;
              margin-top: 10px;
              border-left: 4px solid #ffc107;
            }
            .footer {
              margin-top: 40px;
              padding-top: 20px;
              border-top: 2px solid #dee2e6;
              font-size: 11px;
              color: #6c757d;
              text-align: center;
            }
            @media print {
              body { margin: 0; }
              .header { page-break-after: avoid; }
              .section { page-break-inside: avoid; }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <div>
              ${family.familyPicture ? `
                <img src="${family.familyPicture}" alt="${family.familyName} family" class="family-picture" />
              ` : `
                <div class="dummy-picture">
                  üë®‚Äçüë©‚Äçüëß‚Äçüë¶
                </div>
              `}
            </div>
            <div class="header-content">
              <div class="family-name">${family.familyName}</div>
              <div class="family-id">Family ID: ${family.id.slice(-8)}</div>
              <div class="visited-date">Last Visited: ${family.visitedDate || 'Not recorded'}</div>
              ${family.supportTeamMember ? `
                <div class="supporter">Support Team: ${family.supportTeamMember}</div>
              ` : ''}
            </div>
          </div>

          ${fullAddress || husband?.phoneNumber || wife?.phoneNumber ? `
          <div class="section">
            <div class="section-title">Contact Information</div>
            ${fullAddress ? `
              <div class="contact-item">
                <span class="contact-label">Address:</span><br>
                <span class="contact-value">${fullAddress}</span>
              </div>
            ` : ''}
            ${husband?.phoneNumber ? `
              <div class="contact-item">
                <span class="contact-label">Husband Phone:</span><br>
                <span class="contact-value">${husband.phoneNumber}</span>
              </div>
            ` : ''}
            ${wife?.phoneNumber ? `
              <div class="contact-item">
                <span class="contact-label">Wife Phone:</span><br>
                <span class="contact-value">${wife.phoneNumber}</span>
              </div>
            ` : ''}
          </div>
          ` : ''}

          ${childrenInfo.length > 0 ? `
          <div class="section">
            <div class="section-title">Children (${childrenInfo.length})</div>
            ${childrenInfo.map(child => `
              <div class="child-item">
                <div class="child-name">${child.name}</div>
                ${child.grade || child.gradeGroup ? `
                  <div class="child-details">
                    ${child.grade ? `Grade: ${child.grade}` : ''}
                    ${child.grade && child.gradeGroup ? ' ‚Ä¢ ' : ''}
                    ${child.gradeGroup ? `Group: ${child.gradeGroup}` : ''}
                  </div>
                ` : ''}
              </div>
            `).join('')}
          </div>
          ` : ''}

          ${family.familyNotes ? `
          <div class="section">
            <div class="section-title">Family Notes</div>
            <div class="notes">${family.familyNotes}</div>
          </div>
          ` : ''}

          <div class="footer">
            Printed on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}<br>
            Family Management System
          </div>
        </body>
      </html>
    `;

    this.openPrintWindow(printContent);
  }

  /**
   * Generate table rows for family search results
   */
  private static generateFamilyTableRows(families: FamilyWithMembers[]): string {
    return families.map(family => {
      const children = family.members.filter(m => m.relationship === 'child');
      const husband = family.members.find(m => m.relationship === 'husband');
      const wife = family.members.find(m => m.relationship === 'wife');

      const fullAddress = [
        family.address,
        family.city,
        family.state,
        family.zipCode
      ].filter(Boolean).join(', ');

      const phoneInfo = [];
      if (husband?.phoneNumber) phoneInfo.push(`H: ${husband.phoneNumber}`);
      if (wife?.phoneNumber) phoneInfo.push(`W: ${wife.phoneNumber}`);

      const childrenInfo = children.map(child => {
        const name = child.koreanName && child.englishName
          ? `${child.koreanName} (${child.englishName})`
          : child.koreanName || child.englishName || '';
        const grade = child.gradeLevel || '';
        const gradeGroup = child.gradeGroup || '';
        let childInfo = name;
        if (grade) {
          childInfo += ` [${grade}`;
          if (gradeGroup) {
            childInfo += ` ${gradeGroup}`;
          }
          childInfo += ']';
        }
        return childInfo;
      }).join(', ');

      return `
        <tr>
          <td><span class="family-name">${family.familyName}</span></td>
          <td>${family.visitedDate || '-'}</td>
          <td><span class="children-list">${childrenInfo || '-'}</span></td>
          <td>${fullAddress || '-'}</td>
          <td><span class="phone-info">${phoneInfo.join(', ') || '-'}</span></td>
          <td>${family.supportTeamMember || '-'}</td>
        </tr>
      `;
    }).join('');
  }

  /**
   * Get filter description for print header
   */
  private static getFilterDescription(filters: SearchFilters): string {
    const descriptions = [];

    if (filters.departmentId) {
      descriptions.push('Department filter applied');
    }

    if (filters.teamIds && filters.teamIds.length > 0) {
      descriptions.push(`${filters.teamIds.length} team(s) selected`);
    }

    return descriptions.length > 0 ? descriptions.join(', ') : 'No filters applied';
  }

  /**
   * Open print window with content
   */
  private static openPrintWindow(content: string) {
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(content);
      printWindow.document.close();
      printWindow.focus();
      printWindow.print();
      printWindow.close();
    } else {
      console.error('Unable to open print window. Please check popup settings.');
    }
  }
}

// React component wrapper for easy integration
interface FamilyPrintComponentProps {
  families: FamilyWithMembers[];
  filters: SearchFilters;
  children: (printUtils: typeof FamilyPrintUtils) => React.ReactNode;
}

export function FamilyPrintComponent({ families, filters, children }: FamilyPrintComponentProps) {
  const printUtils = FamilyPrintUtils;

  return <>{children(printUtils)}</>;
}