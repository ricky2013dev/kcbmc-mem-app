import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useLocation } from 'wouter';
import { z } from 'zod';
import { useAuth } from '@/hooks/use-auth';
import { useToast } from '@/hooks/use-toast';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { SundayDatePicker } from '@/components/sunday-date-picker';
import { apiRequest } from '@/lib/queryClient';
import { FamilyWithMembers } from '@shared/schema';
import { formatPhoneNumber } from '@/utils/phone-format';
import { getGradeGroup, generateFamilyName, generateFullAddress } from '@/utils/grade-utils';
import { 
  FamilyFormData, 
  MEMBER_STATUS_OPTIONS, 
  STATE_OPTIONS, 
  COURSE_OPTIONS, 
  GRADE_LEVEL_OPTIONS 
} from '@/types/family';
import { ArrowLeft, Save, Plus, Trash2, Home, User, Users } from 'lucide-react';
import styles from './family-form.module.css';

interface FamilyFormPageProps {
  mode: 'create' | 'edit';
  familyId?: string;
}

const familyFormSchema = z.object({
  visitedDate: z.string().min(1, 'Visited date is required'),
  registrationDate: z.string().min(1, 'Registration date is required'),
  memberStatus: z.enum(['visit', 'member', 'pending']),
  phoneNumber: z.string().optional(),
  email: z.string().email().optional().or(z.literal('')),
  address: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  zipCode: z.string().optional(),
  familyNotes: z.string().optional(),
  lifeGroup: z.string().optional(),
  supportTeamMember: z.string().optional(),
  husband: z.object({
    koreanName: z.string().optional(),
    englishName: z.string().optional(),
    birthDate: z.string().optional(),
    phoneNumber: z.string().optional(),
    email: z.string().email().optional().or(z.literal('')),
    courses: z.array(z.string()),
  }),
  wife: z.object({
    koreanName: z.string().optional(),
    englishName: z.string().optional(),
    birthDate: z.string().optional(),
    phoneNumber: z.string().optional(),
    email: z.string().email().optional().or(z.literal('')),
    courses: z.array(z.string()),
  }),
  children: z.array(z.object({
    koreanName: z.string().optional(),
    englishName: z.string().optional(),
    birthDate: z.string().optional(),
    gradeLevel: z.string().optional(),
    school: z.string().optional(),
  })),
}).refine(
  (data) => {
    // Family name is effectively required through the auto-generation logic
    // At least one spouse's Korean name is needed to generate family name
    const hasHusbandName = data.husband.koreanName && data.husband.koreanName.trim().length > 0;
    const hasWifeName = data.wife.koreanName && data.wife.koreanName.trim().length > 0;
    return hasHusbandName || hasWifeName;
  },
  {
    message: "Family name cannot be generated without at least one spouse's Korean name",
    path: ["husband", "koreanName"],
  }
);

type FormData = z.infer<typeof familyFormSchema>;

export default function FamilyFormPage({ mode, familyId }: FamilyFormPageProps) {
  const [, setLocation] = useLocation();
  const { user } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const [autoGeneratedValues, setAutoGeneratedValues] = useState({
    familyName: '',
    fullAddress: '',
    gradeGroups: {} as Record<number, string>,
  });

  const form = useForm<FormData>({
    resolver: zodResolver(familyFormSchema),
    defaultValues: {
      visitedDate: '',
      registrationDate: '',
      memberStatus: 'visit',
      phoneNumber: '',
      email: '',
      address: '',
      city: '',
      state: 'TX',
      zipCode: '',
      familyNotes: '',
      lifeGroup: '',
      supportTeamMember: '',
      husband: {
        koreanName: '',
        englishName: '',
        birthDate: '',
        phoneNumber: '',
        email: '',
        courses: [],
      },
      wife: {
        koreanName: '',
        englishName: '',
        birthDate: '',
        phoneNumber: '',
        email: '',
        courses: [],
      },
      children: [{
        koreanName: '',
        englishName: '',
        birthDate: '',
        gradeLevel: '',
        school: '',
      }],
    },
  });

  const { data: family, isLoading } = useQuery<FamilyWithMembers>({
    queryKey: ['families', familyId],
    queryFn: async () => {
      const response = await apiRequest('GET', `/api/families/${familyId}`);
      return response.json();
    },
    enabled: mode === 'edit' && !!familyId,
  });

  const saveMutation = useMutation({
    mutationFn: async (data: FormData) => {
      const familyData = {
        familyName: autoGeneratedValues.familyName,
        fullAddress: autoGeneratedValues.fullAddress,
        visitedDate: data.visitedDate,
        registrationDate: data.registrationDate,
        memberStatus: data.memberStatus,
        phoneNumber: data.phoneNumber,
        email: data.email || undefined,
        address: data.address,
        city: data.city,
        state: data.state,
        zipCode: data.zipCode,
        familyNotes: data.familyNotes || undefined,
        lifeGroup: data.lifeGroup || undefined,
        supportTeamMember: data.supportTeamMember || undefined,
      };

      const members = [
        {
          ...data.husband,
          relationship: 'husband' as const,
          email: data.husband.email || undefined,
          phoneNumber: data.husband.phoneNumber || undefined,
          birthDate: data.husband.birthDate || undefined,
        },
        {
          ...data.wife,
          relationship: 'wife' as const,
          email: data.wife.email || undefined,
          phoneNumber: data.wife.phoneNumber || undefined,
          birthDate: data.wife.birthDate || undefined,
        },
        ...data.children.map(child => ({
          ...child,
          relationship: 'child' as const,
          birthDate: child.birthDate || undefined,
          gradeLevel: child.gradeLevel || undefined,
          gradeGroup: autoGeneratedValues.gradeGroups[data.children.indexOf(child)] || undefined,
          school: child.school || undefined,
          courses: [],
          phoneNumber: undefined,
          email: undefined,
        })),
      ];

      if (mode === 'create') {
        return await apiRequest('POST', '/api/families', { ...familyData, members });
      } else {
        return await apiRequest('PUT', `/api/families/${familyId}`, { ...familyData, members });
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['families'] });
      toast({
        title: "Success",
        description: mode === 'create' ? "Family created successfully." : "Family updated successfully.",
      });
      setLocation('/');
    },
    onError: (error: any) => {
      toast({
        title: "Error",
        description: error.message || `Failed to ${mode} family.`,
        variant: "destructive",
      });
    },
  });

  // Load family data for edit mode
  useEffect(() => {
    if (mode === 'edit' && family) {
      const husband = family.members.find(m => m.relationship === 'husband');
      const wife = family.members.find(m => m.relationship === 'wife');
      const children = family.members.filter(m => m.relationship === 'child');

      form.reset({
        visitedDate: family.visitedDate,
        registrationDate: family.registrationDate,
        memberStatus: family.memberStatus as any,
        phoneNumber: family.phoneNumber,
        email: family.email || '',
        address: family.address,
        city: family.city,
        state: family.state,
        zipCode: family.zipCode,
        familyNotes: family.familyNotes || '',
        lifeGroup: family.lifeGroup || '',
        supportTeamMember: family.supportTeamMember || '',
        husband: husband ? {
          koreanName: husband.koreanName,
          englishName: husband.englishName,
          birthDate: husband.birthDate || '',
          phoneNumber: husband.phoneNumber || '',
          email: husband.email || '',
          courses: husband.courses || [],
        } : form.getValues('husband'),
        wife: wife ? {
          koreanName: wife.koreanName,
          englishName: wife.englishName,
          birthDate: wife.birthDate || '',
          phoneNumber: wife.phoneNumber || '',
          email: wife.email || '',
          courses: wife.courses || [],
        } : form.getValues('wife'),
        children: children.length > 0 ? children.map(child => ({
          koreanName: child.koreanName,
          englishName: child.englishName,
          birthDate: child.birthDate || '',
          gradeLevel: child.gradeLevel || '',
          school: child.school || '',
        })) : form.getValues('children'),
      });
    }
  }, [family, mode, form]);

  // Auto-generate family name
  useEffect(() => {
    const subscription = form.watch((value) => {
      const familyName = generateFamilyName(
        value.husband?.koreanName || '',
        value.wife?.koreanName || ''
      );
      
      const fullAddress = generateFullAddress(
        value.address || '',
        value.city || '',
        value.state || '',
        value.zipCode || ''
      );

      const gradeGroups: Record<number, string> = {};
      value.children?.forEach((child, index) => {
        if (child?.gradeLevel) {
          gradeGroups[index] = getGradeGroup(child.gradeLevel);
        }
      });

      setAutoGeneratedValues({ familyName, fullAddress, gradeGroups });
    });

    return () => subscription.unsubscribe();
  }, [form]);

  const addChild = () => {
    const currentChildren = form.getValues('children');
    form.setValue('children', [...currentChildren, {
      koreanName: '',
      englishName: '',
      birthDate: '',
      gradeLevel: '',
      school: '',
    }]);
  };

  const removeChild = (index: number) => {
    const currentChildren = form.getValues('children');
    if (currentChildren.length > 1) {
      form.setValue('children', currentChildren.filter((_, i) => i !== index));
    }
  };

  const handlePhoneFormat = (value: string, fieldName: string) => {
    const formatted = formatPhoneNumber(value);
    form.setValue(fieldName as any, formatted);
  };

  const onSubmit = (data: FormData) => {
    saveMutation.mutate(data);
  };

  if (mode === 'edit' && isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-muted-foreground">Loading family data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      {/* Navigation Header */}
      <nav className={styles.nav}>
        <div className={styles.navContent}>
          <div className={styles.navLeft}>
            <Button 
              variant="ghost" 
              size="sm"
              onClick={() => setLocation('/')}
              className={styles.backButton}
              data-testid="button-back"
            >
              <ArrowLeft className="w-4 h-4" />
            </Button>
            <h1 className={styles.navTitle}>
              {mode === 'create' ? 'Add New Family' : 'Edit Family'}
            </h1>
          </div>
          
          <div className={styles.navRight}>
            <span className={styles.userName}>
              {user?.fullName} ({user?.group})
            </span>
          </div>
        </div>
      </nav>

      {/* Form Content */}
      <div className={styles.main}>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className={styles.form}>
            {/* Family Information Section */}
            <Card>
              <CardHeader>
                <h2 className={styles.sectionTitle}>
                  <Home className="w-5 h-5 mr-2 text-primary" />
                  Family Information
                </h2>
              </CardHeader>
              <CardContent className={styles.sectionContent}>
                <div className={styles.grid}>
                  <div className={styles.fullWidth}>
                    <Label>Family Name</Label>
                    <Input 
                      value={autoGeneratedValues.familyName}
                      placeholder="Auto-generated from husband and wife names"
                      readOnly
                      className="bg-muted text-muted-foreground"
                      data-testid="input-family-name"
                    />
                    <p className={styles.fieldHint}>This field is automatically generated</p>
                  </div>
                  
                  <FormField
                    control={form.control}
                    name="visitedDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Visited Date</FormLabel>
                        <FormControl>
                          <SundayDatePicker 
                            {...field} 
                            data-testid="input-visited-date"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="registrationDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Registration Date</FormLabel>
                        <FormControl>
                          <SundayDatePicker 
                            {...field} 
                            data-testid="input-registration-date"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="memberStatus"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Member Status</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                          <FormControl>
                            <SelectTrigger data-testid="select-member-status">
                              <SelectValue placeholder="Select status..." />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {MEMBER_STATUS_OPTIONS.map(option => (
                              <SelectItem key={option.value} value={option.value}>
                                {option.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="phoneNumber"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Phone Number</FormLabel>
                        <FormControl>
                          <Input 
                            {...field}
                            placeholder="(555) 123-4567"
                            onChange={(e) => handlePhoneFormat(e.target.value, 'phoneNumber')}
                            data-testid="input-phone-number"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <div className={styles.fullWidth}>
                    <FormField
                      control={form.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Email</FormLabel>
                          <FormControl>
                            <Input 
                              {...field}
                              type="email"
                              placeholder="family@example.com"
                              data-testid="input-email"
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <div className={styles.fullWidth}>
                    <FormField
                      control={form.control}
                      name="address"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Address</FormLabel>
                          <FormControl>
                            <Input 
                              {...field}
                              placeholder="123 Main Street"
                              data-testid="input-address"
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <FormField
                    control={form.control}
                    name="city"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>City</FormLabel>
                        <FormControl>
                          <Input 
                            {...field}
                            placeholder="Los Angeles"
                            data-testid="input-city"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="state"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>State</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                          <FormControl>
                            <SelectTrigger data-testid="select-state">
                              <SelectValue placeholder="Select state..." />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {STATE_OPTIONS.map(option => (
                              <SelectItem key={option.value} value={option.value}>
                                {option.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="zipCode"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>ZIP Code</FormLabel>
                        <FormControl>
                          <Input 
                            {...field}
                            placeholder="90210"
                            data-testid="input-zip-code"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="lifeGroup"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Life Group</FormLabel>
                        <FormControl>
                          <Input 
                            {...field}
                            placeholder="Life group leader name"
                            data-testid="input-life-group"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="supportTeamMember"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Support Team Member</FormLabel>
                        <FormControl>
                          <Input 
                            {...field}
                            placeholder="Support team member name"
                            data-testid="input-support-team"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <div className={styles.fullWidth}>
                    <FormField
                      control={form.control}
                      name="familyNotes"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Family Notes</FormLabel>
                          <FormControl>
                            <Textarea 
                              {...field}
                              rows={3}
                              placeholder="Additional notes about the family..."
                              className="resize-none"
                              data-testid="textarea-family-notes"
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Husband Section */}
            <Card>
              <CardHeader>
                <h2 className={styles.sectionTitle}>
                  <User className="w-5 h-5 mr-2 text-primary" />
                  Husband Information
                </h2>
              </CardHeader>
              <CardContent className={styles.sectionContent}>
                <div className={styles.grid}>
                  <FormField
                    control={form.control}
                    name="husband.koreanName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Korean Name</FormLabel>
                        <FormControl>
                          <Input 
                            {...field}
                            placeholder="김철수"
                            data-testid="input-husband-korean-name"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="husband.englishName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>English Name</FormLabel>
                        <FormControl>
                          <Input 
                            {...field}
                            placeholder="John Kim"
                            data-testid="input-husband-english-name"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="husband.birthDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Birth Date</FormLabel>
                        <FormControl>
                          <Input 
                            {...field}
                            type="date"
                            data-testid="input-husband-birth-date"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="husband.phoneNumber"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Phone Number</FormLabel>
                        <FormControl>
                          <Input 
                            {...field}
                            placeholder="(555) 123-4567"
                            onChange={(e) => handlePhoneFormat(e.target.value, 'husband.phoneNumber')}
                            data-testid="input-husband-phone"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <div className={styles.fullWidth}>
                    <FormField
                      control={form.control}
                      name="husband.email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Email</FormLabel>
                          <FormControl>
                            <Input 
                              {...field}
                              type="email"
                              placeholder="john.kim@example.com"
                              data-testid="input-husband-email"
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <div className={styles.fullWidth}>
                    <FormField
                      control={form.control}
                      name="husband.courses"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Courses</FormLabel>
                          <div className={styles.checkboxGrid}>
                            {COURSE_OPTIONS.map(course => (
                              <div key={course.value} className="flex items-center space-x-2">
                                <Checkbox
                                  id={`husband-course-${course.value}`}
                                  checked={field.value?.includes(course.value)}
                                  onCheckedChange={(checked) => {
                                    const currentCourses = field.value || [];
                                    if (checked) {
                                      field.onChange([...currentCourses, course.value]);
                                    } else {
                                      field.onChange(currentCourses.filter(c => c !== course.value));
                                    }
                                  }}
                                  data-testid={`checkbox-husband-course-${course.value}`}
                                />
                                <Label htmlFor={`husband-course-${course.value}`} className="text-sm">
                                  {course.label}
                                </Label>
                              </div>
                            ))}
                          </div>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Wife Section */}
            <Card>
              <CardHeader>
                <h2 className={styles.sectionTitle}>
                  <User className="w-5 h-5 mr-2 text-primary" />
                  Wife Information
                </h2>
              </CardHeader>
              <CardContent className={styles.sectionContent}>
                <div className={styles.grid}>
                  <FormField
                    control={form.control}
                    name="wife.koreanName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Korean Name</FormLabel>
                        <FormControl>
                          <Input 
                            {...field}
                            placeholder="김영희"
                            data-testid="input-wife-korean-name"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="wife.englishName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>English Name</FormLabel>
                        <FormControl>
                          <Input 
                            {...field}
                            placeholder="Jane Kim"
                            data-testid="input-wife-english-name"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="wife.birthDate"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Birth Date</FormLabel>
                        <FormControl>
                          <Input 
                            {...field}
                            type="date"
                            data-testid="input-wife-birth-date"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={form.control}
                    name="wife.phoneNumber"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Phone Number</FormLabel>
                        <FormControl>
                          <Input 
                            {...field}
                            placeholder="(555) 123-4568"
                            onChange={(e) => handlePhoneFormat(e.target.value, 'wife.phoneNumber')}
                            data-testid="input-wife-phone"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <div className={styles.fullWidth}>
                    <FormField
                      control={form.control}
                      name="wife.email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Email</FormLabel>
                          <FormControl>
                            <Input 
                              {...field}
                              type="email"
                              placeholder="jane.kim@example.com"
                              data-testid="input-wife-email"
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <div className={styles.fullWidth}>
                    <FormField
                      control={form.control}
                      name="wife.courses"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Courses</FormLabel>
                          <div className={styles.checkboxGrid}>
                            {COURSE_OPTIONS.map(course => (
                              <div key={course.value} className="flex items-center space-x-2">
                                <Checkbox
                                  id={`wife-course-${course.value}`}
                                  checked={field.value?.includes(course.value)}
                                  onCheckedChange={(checked) => {
                                    const currentCourses = field.value || [];
                                    if (checked) {
                                      field.onChange([...currentCourses, course.value]);
                                    } else {
                                      field.onChange(currentCourses.filter(c => c !== course.value));
                                    }
                                  }}
                                  data-testid={`checkbox-wife-course-${course.value}`}
                                />
                                <Label htmlFor={`wife-course-${course.value}`} className="text-sm">
                                  {course.label}
                                </Label>
                              </div>
                            ))}
                          </div>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Children Section */}
            <Card>
              <CardHeader>
                <div className={styles.sectionHeader}>
                  <h2 className={styles.sectionTitle}>
                    <Users className="w-5 h-5 mr-2 text-primary" />
                    Children Information
                  </h2>
                  <Button 
                    type="button" 
                    variant="outline"
                    size="sm"
                    onClick={addChild}
                    data-testid="button-add-child"
                  >
                    <Plus className="w-4 h-4 mr-1" />
                    Add Child
                  </Button>
                </div>
              </CardHeader>
              <CardContent className={styles.sectionContent}>
                <div className={styles.childrenList}>
                  {form.watch('children').map((_, index) => (
                    <div key={index} className={styles.childCard}>
                      <div className={styles.childHeader}>
                        <h3 className={styles.childTitle}>Child {index + 1}</h3>
                        {form.watch('children').length > 1 && (
                          <Button 
                            type="button" 
                            variant="ghost"
                            size="sm"
                            onClick={() => removeChild(index)}
                            className="text-destructive hover:text-destructive/80"
                            data-testid={`button-remove-child-${index}`}
                          >
                            <Trash2 className="w-4 h-4 mr-1" />
                            Remove
                          </Button>
                        )}
                      </div>
                      
                      <div className={styles.grid}>
                        <FormField
                          control={form.control}
                          name={`children.${index}.koreanName`}
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Korean Name</FormLabel>
                              <FormControl>
                                <Input 
                                  {...field}
                                  placeholder="김민수"
                                  data-testid={`input-child-${index}-korean-name`}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name={`children.${index}.englishName`}
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>English Name</FormLabel>
                              <FormControl>
                                <Input 
                                  {...field}
                                  placeholder="Michael Kim"
                                  data-testid={`input-child-${index}-english-name`}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name={`children.${index}.birthDate`}
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Birth Date</FormLabel>
                              <FormControl>
                                <Input 
                                  {...field}
                                  type="date"
                                  data-testid={`input-child-${index}-birth-date`}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={form.control}
                          name={`children.${index}.gradeLevel`}
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Grade Level</FormLabel>
                              <Select onValueChange={field.onChange} value={field.value}>
                                <FormControl>
                                  <SelectTrigger data-testid={`select-child-${index}-grade-level`}>
                                    <SelectValue placeholder="Select grade..." />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  {GRADE_LEVEL_OPTIONS.map(option => (
                                    <SelectItem key={option.value} value={option.value}>
                                      {option.label}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <div>
                          <Label>Grade Group</Label>
                          <Input 
                            value={autoGeneratedValues.gradeGroups[index] || ''}
                            placeholder="Auto-populated from grade level"
                            readOnly
                            className="bg-muted text-muted-foreground"
                            data-testid={`input-child-${index}-grade-group`}
                          />
                        </div>
                        
                        <FormField
                          control={form.control}
                          name={`children.${index}.school`}
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>School</FormLabel>
                              <FormControl>
                                <Input 
                                  {...field}
                                  placeholder="School name"
                                  data-testid={`input-child-${index}-school`}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Form Actions */}
            <div className={styles.actions}>
              <Button 
                type="button" 
                variant="secondary"
                onClick={() => setLocation('/')}
                data-testid="button-cancel"
              >
                Cancel
              </Button>
              <Button 
                type="submit" 
                disabled={saveMutation.isPending}
                data-testid="button-save"
              >
                <Save className="w-4 h-4 mr-2" />
                {saveMutation.isPending ? 'Saving...' : 'Save Family'}
              </Button>
            </div>
          </form>
        </Form>
      </div>
    </div>
  );
}
